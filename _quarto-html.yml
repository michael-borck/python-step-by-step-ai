# HTML-specific configuration overrides
# Use with: quarto render --profile html

format:
  html:
    theme:
      light: [cosmo, assets/custom.scss]
      dark: [darkly, assets/custom-dark.scss]
    css:
      - assets/code-styles.css
      - assets/exercise-styles.css
      - assets/details-styles.css
    
    # Code appearance
    code-fold: false
    code-tools:
      source: false
      toggle: false
      caption: none
    code-copy: hover
    code-overflow: wrap
    code-line-numbers: false
    highlight-style: github
    
    # Navigation
    toc: true
    toc-depth: 3
    toc-expand: 2
    toc-title: "On this page"
    smooth-scroll: true
    
    # Layout
    page-layout: article
    margin-header: |
      ![](cover.png){width=60px style="float: right; margin-left: 10px;"}
    
    # Features
    search:
      location: navbar
      type: overlay
      copy-button: true
    
    # Comments system (optional)
    comments:
      hypothesis: false
      utterances: false
    
    # Fonts
    mainfont: "Source Sans Pro, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif"
    monofont: "'Source Code Pro', 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', monospace"
    
    # Custom includes
    include-in-header:
      - text: |
          <style>
          /* Exercise level badges */
          .level-1 { 
            background-color: #28a745; 
            color: white; 
            padding: 2px 8px; 
            border-radius: 4px; 
            font-weight: bold;
          }
          .level-2 { 
            background-color: #ffc107; 
            color: black; 
            padding: 2px 8px; 
            border-radius: 4px; 
            font-weight: bold;
          }
          .level-3 { 
            background-color: #fd7e14; 
            color: white; 
            padding: 2px 8px; 
            border-radius: 4px; 
            font-weight: bold;
          }
          .level-4 { 
            background-color: #dc3545; 
            color: white; 
            padding: 2px 8px; 
            border-radius: 4px; 
            font-weight: bold;
          }
          .level-5 { 
            background-color: #6f42c1; 
            color: white; 
            padding: 2px 8px; 
            border-radius: 4px; 
            font-weight: bold;
          }
          
          /* Python output styling */
          .python-output {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 10px;
            margin: 10px 0;
            font-family: monospace;
          }
          
          /* Three Rules emphasis */
          .three-rules {
            background-color: #fff3cd;
            border: 2px solid #ffc107;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
          }
          
          /* AI prompt boxes */
          .ai-prompt {
            background-color: #e7f3ff;
            border-left: 4px solid #2196F3;
            padding: 12px;
            margin: 16px 0;
          }
          
          /* Details/summary styling */
          details {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 10px;
            margin: 10px 0;
          }
          
          details summary {
            cursor: pointer;
            font-weight: bold;
            margin: -10px;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 4px 4px 0 0;
          }
          
          details[open] summary {
            border-bottom: 1px solid #dee2e6;
            margin-bottom: 10px;
          }
          
          /* Code annotation arrows */
          .code-annotation {
            color: #dc3545;
            font-weight: bold;
          }
          
          /* Better inline code */
          code:not(pre code) {
            background-color: #f3f4f6;
            padding: 2px 4px;
            border-radius: 3px;
            font-size: 0.9em;
          }
          
          /* Reflection checkboxes */
          .reflection-list {
            list-style: none;
            padding-left: 0;
          }
          
          .reflection-list li::before {
            content: "☐ ";
            font-size: 1.2em;
            margin-right: 8px;
          }
          </style>
          
          <script>
          // Add copy button to AI prompts
          document.addEventListener('DOMContentLoaded', function() {
            const prompts = document.querySelectorAll('.ai-prompt');
            prompts.forEach(prompt => {
              const button = document.createElement('button');
              button.textContent = 'Copy';
              button.className = 'copy-prompt-btn';
              button.onclick = function() {
                navigator.clipboard.writeText(prompt.textContent);
                button.textContent = 'Copied!';
                setTimeout(() => button.textContent = 'Copy', 2000);
              };
              prompt.appendChild(button);
            });
          });
          
          // Interactive reflection checkboxes
          document.addEventListener('DOMContentLoaded', function() {
            const checkboxes = document.querySelectorAll('.reflection-list li');
            checkboxes.forEach(item => {
              item.style.cursor = 'pointer';
              item.onclick = function() {
                if (item.textContent.startsWith('☐')) {
                  item.textContent = '☑' + item.textContent.substring(1);
                } else {
                  item.textContent = '☐' + item.textContent.substring(1);
                }
              };
            });
          });
          </script>
    
    include-after-body:
      - file: assets/code-interactive.js
      - file: assets/details-interactive.js
      - text: |
          <script>
          // Progress tracking
          if (typeof(Storage) !== "undefined") {
            // Track completed chapters
            const currentChapter = document.querySelector('h1')?.id;
            if (currentChapter) {
              let completed = JSON.parse(localStorage.getItem('completedChapters') || '[]');
              if (!completed.includes(currentChapter)) {
                // Add completion button
                const btn = document.createElement('button');
                btn.textContent = 'Mark Chapter as Complete';
                btn.onclick = function() {
                  completed.push(currentChapter);
                  localStorage.setItem('completedChapters', JSON.stringify(completed));
                  btn.textContent = '✓ Completed';
                  btn.disabled = true;
                };
                document.querySelector('main')?.appendChild(btn);
              }
            }
          }
          </script>